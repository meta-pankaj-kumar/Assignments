Assignment 1
Problem 1

DELIMITER //

create function noOfOrders( month_input int,year_input int) 
returns int

begin

declare total int;

select count(orders.orderid)

from Orders

where year(Orderdate)=year_input and month(Orderdate)= month_input into total;

return total;

end;

//
DELIMITER ;



Select noOfOrders('08' , '2019');



Problem 2

DELIMITER //

CREATE FUNCTION monthHavingMaxOrders (year INT)
    
RETURNS INT
        
DETERMINISTIC
            
BEGIN
                
DECLARE month_of_max_orders int;
                
SELECT MONTH(orderdate) 
INTO month_of_max_orders
                
FROM orders
                
WHERE YEAR(orderdate) = year
                
GROUP BY MONTH(orderdate)
                
ORDER BY MONTH(orderdate) DESC LIMIT 1;
                
RETURN(month_of_max_orders);
            
END;

//
DELIMITER ;


Select monthHavingMaxOrders('2018');



Assignment 2
Problem1



DELIMITER //

CREATE PROCEDURE average_sales (month INT, year INT)
        
DETERMINISTIC
            
BEGIN
                
SELECT product.productId AS Id, productName AS Name, orderedProducts.quantity As Avg
				
FROM orderedproducts LEFT JOIN product ON orderedproducts.productId = product.productId 
				
LEFT JOIN orders on orderedProducts.orderId = orders.orderId
				
WHERE MONTH(orders.orderDate) = month and year(orders.orderDate) = year
				
Order by (orderedProducts.productId);
            
END;

// DELIMITER ;



call average_sales(8,2019);



Problem2

DELIMITER //
CREATE PROCEDURE order_status (startdate date , enddate date)
    
DETERMINISTIC
            
BEGIN
				
if(startdate > enddate ) 
				
then set startdate = (day(startdate) = 01 and month(startdate) = month(enddate) and year(startdate) = year(enddate));
                
end if;
				
SELECT orderedProducts.orderId as orderId , orderedProducts.productId as productId , orderstatus.status as status , orders.orderdate as dateOfOrder 
				
from orderedProducts inner Join orderstatus on orderedProducts.orderId = orderstatus.orderId and orderedProducts.productId = orderstatus.productId
				
left Join orders on orderedProducts.orderId = orders.orderId
				
where orders.orderDate >= startdate and orders.orderdate <= enddate
				
Order by (orderId);
            
END;

// DELIMITER ;



call order_status('2019-07-05','2019-08-21');

Assignment 3

Problem 1

Order

/*Part-3(a)*/

create index orderIndex on orders(ShopperId);




ALTER TABLE product

DROP INDEX Productname;


/*Part-3(b)*/

explain select productId from product where Productname='Note 4';#Took 26 rows for searching

create index productName on product(ProductName);

SHOW INDEX FROM product;

explain select productID from product where Productname='Note 4';#Took just 2 rows




/*Part-3(c)*/

explain select CategoryId from category where CategoryName='Acer';#Took 18 rows for searching 

create index categoryIndex on category(categoryName);

SHOW INDEX FROM category;

explain select CategoryId from category where CategoryName='Acer';#Took 2 rows for searching 